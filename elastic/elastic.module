<?php

/**
 * Prepares a node to be added to elastic
 *
 * @param $node
 * @return array
 */
function _elastic_prepare_node($node) {

  if (is_object($node)) {
    $params = array(
      'index' => 'node',
      'type' => $node->type,
      'body' => array(),
    );
  }

  $wanted = array('vid', 'uid', 'title', 'log', 'status', 'comment', 'promote', 'sticky', 'nid', 'type', 'language', 'created', 'changed', 'revision_timestamp', 'revision_uid');
  foreach ((array) $node as $key => $prop) {
    if (in_array($key, $wanted)) {
      $params['body'][$key] = $prop;
    }
    if (strpos($key, 'field') !== false || $key == 'body') {
      $field = field_get_items('node', $node, $key);
      if ($field) {

        // Special case with image field.
        if ($key == 'field_image') {
          foreach ($field as &$img) {
            $img = file_load($img['fid']);
            $img->url = file_create_url($img->uri);
          }
          $params['body'][$key] = $field;
        }

        // Default.
        else {
          $params['body'][$key] = $field;
        }
      }
    }
  }

  return $params;
}

/**
 * Helper function that returns a node from Elastic by its nid.
 *
 * @param $client
 * @param $node
 * @return mixed
 */
function _elastic_perform_node_search_by_id($client, $node) {
  $search = array(
    'index' => 'node',
    'type' => $node->type,
    'version' => true,
    'body' => array(
      'query' => array(
        'match' => array(
          'nid' => $node->nid,
        ),
      ),
    ),
  );

  return $client->search($search);
}

/**
 * Implements hook_node_insert().
 */
function elastic_node_insert($node) {
  $client = elasticsearch_connector_get_client_by_id('my_cluster_id');
  $params = _elastic_prepare_node($node);

  if ($params) {
    $result = $client->index($params);
    if ($result && $result['created'] == true) {
      drupal_set_message('The node has been saved to Elastic.');
    }
    elseif ($result && $result['created'] == false) {
      drupal_set_message('There was a problem saving this node to Elastic.');
    }
  }
}

/**
 * Implements hook_node_update().
 */
function elastic_node_update($node) {

  if ($node->is_new == false) {
    $client = elasticsearch_connector_get_client_by_id('my_cluster_id');
    $params = _elastic_prepare_node($node);
    if ($params) {
      // If the node is in elastic, update it by specifying its id
      $result = _elastic_perform_node_search_by_id($client, $node);
      if ($result && $result['hits']['total'] == 1) {
        $params['id'] = $result['hits']['hits'][0]['_id'];
        $version = $result['hits']['hits'][0]['_version'];
        $index = $client->index($params);
        if ($index['_version'] == $version + 1) {
          drupal_set_message('The node has been updated in Elastic.');
        }
        else {
          drupal_set_message('There was a problem updating this node in Elastic.');
        }
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function elastic_node_delete($node) {

  $client = elasticsearch_connector_get_client_by_id('my_cluster_id');

  // If the node is in Elastic, remove it
  $result = _elastic_perform_node_search_by_id($client, $node);
  if ($result && $result['hits']['total'] == 1) {
    $params = array(
      'index' => 'node',
      'type' => $node->type,
      'id' => $result['hits']['hits'][0]['_id'],
    );
    $result = $client->delete($params);
    if ($result && $result['found'] == true) {
      drupal_set_message('The node has been deleted in Elastic.');
    }
    else {
      drupal_set_message('There was a problem deleting this node in Elastic.');
    }
  }

}



